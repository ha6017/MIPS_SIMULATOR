Test ID, Instruction name, Expected Output, Author, Additional Information
add1, add, Pass, ca2217, no problem +ve
add2, add, Pass, ca2217, no problem -ve
add3, add, Pass, ca2217, most +ve give -2
add4, add, Pass, ca2217, most -ve overflow
add5, add, Pass, ca2217, most +ve and 0
add6, add, Pass, ca2217, most -ve and 0
add7, add, Pass, ca2217, one -ve and +ve
addi1, addi, Pass, ca2217, no problem +ve
addi2, addi, Pass, ca2217, no problem -ve
addi3, addi, Pass, ca2217, overflow positive
addi4, addi, Pass, ca2217, overflow negative
addi5, addi, Pass, ca2217, large immediate
addiu1, addiu, Pass, ca2217, no problem +ve
addiu2, addiu, Pass, ca2217, no overflow with highest
addiu3, addiu, Pass, ca2217, large immediate
addu1, addu, Pass, ca2217, no problem +ve
addu2, addu, Pass, ca2217, most +ve
addu3, addu, Pass, ca2217, no overflow (even most -ve)
and1, and, Pass, ca2217, contents one register
and2, and, Pass, ca2217, contents both registers
and3, and, Pass, ca2217, and all 0
and4, and, Pass, ca2217, and register with itself
andi1, andi, Pass, ca2217, extending and anding correctly
andi2, andi, Pass, ca2217, anding upper 16 bits
andi3, andi, Pass, ca2217, combining registers
beq1, beq, Pass, ca2217, should branch rt = rs
beq2, beq, Pass, ca2217, should not branch rt != rs
beq3, beq, Pass, ca2217, should branch rt = rs (negative)
beq4, beq, Pass, ca2217, out of range PC
beq5, beq, Pass, ca2217, correct negative branch PC
beq6, beq, Pass, ca2217, don’t branch second
bgez1, bgez, Pass, ca2217, should branch positive rt
bgez2, bgez, Pass, ca2217, shouldn’t branch negative rt
bgez3, bgez, Pass, ca2217, should branch rt zero
bgez4, bgez, Pass, ca2217, out of range PC
bgez5, bgez, Pass, ca2217, out of range PC
bgez6, bgez, Pass, ca2217, correct negative offset
bgezal1, bgezal, Pass, ca2217, should branch positive rt
bgezal2, bgezal, Pass, ca2217, shouldn’t branch negative rt
bgezal3, bgezal, Pass, ca2217, should branch rt zero
bgezal4, bgezal, Pass, ca2217, out of range PC
bgezal5, bgezal, Pass, ca2217, take both branches +ve and -ve
bgezal6, bgezal, Pass, ca2217, don’t take second branch
bgezal7, bgezal, Pass, ca2217, linker
bgtz1, bgtz, Pass, ca2217, should branch +ve rt
bgtz2, bgtz, Pass, ca2217, shouldn’t branch -ve rt
bgtz3, bgtz, Pass, ca2217, should not branch rt zero
bgtz4, bgtz, Pass, ca2217, out of range PC
bgtz5, bgtz, Pass, ca2217, take both branches
bgtz6, bgtz, Pass, ca2217, don’t take second branch
blez1, blez, Pass, ca2217, should branch -ve rt
blez2, blez, Pass, ca2217, shouldn’t branch +ve rt
blez3, blez, Pass, ca2217, should branch rt zero
blez4, blez, Pass, ca2217, out of range PC
blez5, blez, Pass, ca2217, out of range PC
blez6, blez, Pass, ca2217, correct negative offset
bltz1, bltz, Pass, ca2217, should branch negative rt
bltz2, bltz, Pass, ca2217, shouldn’t branch positive rt
bltz3, bltz, Pass, ca2217, should not branch rt zero
bltz4, bltz, Pass, ca2217, out of range PC
bltz5, bltz, Pass, ca2217, take both branches
bltz6, bltz, Pass, ca2217, don’t take second branch
bltzal1, bltzal, Pass, ca2217, should branch -ve rt
bltzal2, bltzal, Pass, ca2217, shouldn’t branch +ve rt
bltzal3, bltzal, Pass, ca2217, should not branch rt zero
bltzal4, bltzal, Pass, ca2217, out of range PC
bltzal5, bltzal, Pass, ca2217, take both branches +ve and -ve
bltzal6, bltzal, Pass, ca2217, don’t take second branch
bltzal7, bltzal, Pass, ca2217, linker
bne1, bne, Pass, ca2217, should branch rt != rs
bne2, bne, Pass, ca2217, should not branch rt = rs
bne3, bne, Pass, ca2217, should branch rt != rs (negative)
bne4, bne, Pass, ca2217, out of range PC
bne5, bne, Pass, ca2217, correct negative branch PC
bne6, bne, Pass, ca2217, don’t branch second
div1, div, Pass, ca2217, +ve / +ve no R
div2, div, Pass, ca2217, +ve / +ve with R
div3, div, Pass, ca2217, -ve / -ve no R
div4, div, Pass, ca2217, -ve / +ve no R
div5, div, Pass, ca2217,  +ve / -ve with R
div6, div, Pass, ca2217,  0 / +ve
div7, div, Pass, ca2217,  +ve / 0
div8, div, Pass, ca2217,  1 / +ve
divu1, divu, Pass, ca2217,  num / num no R
divu2, divu, Pass, ca2217, +ve / +ve with R
divu3, divu, Pass, ca2217,  -ve / -ve no R
divu4, divu, Pass, ca2217,  0 / +ve
divu5, divu, Pass, ca2217,  +ve / 0
divu6, divu, Pass, ca2217,  1 / +ve
j1, j, Pass, ca2217, Jump back and forth saving link
j2, j, Pass, ca2217, Jump to unalligned memory
j3, j, Pass, ca2217, Illegal jump to out of bounds memory
jal1, jal, Pass, ca2217, Jump back and forth saving link
jal2, jal, Pass, ca2217, Jump from saved link
jal3, jal, Pass, ca2217, Illegal jump to unalligned memory
jalr1, jalr, Pass, ca2217, Jump and save link
jalr2, jalr, Pass, ca2217, Jump from saved link
jalr3, jalr, Pass, ca2217, Illegal jump to unalligned memory
jalr4, jalr, Pass, ca2217, Different format of JALR with rd specified
jr1, jr, Pass, ca2217, correct PC
jr2, jr, Pass, ca2217, out of range
jr3, jr, Pass, ca2217, unalligned memory
lb1, lb, Pass, ha6017, load byte 2 from word
lb10, lb, Pass, ha6017, getc in range at 003
lb11, lb, Pass, ha6017, getc null eof
lb12, lb, Pass, ha6017, instr no-ops
lb13, lb, Pass, ha6017, instr addr
lb2, lb, Pass, ha6017, load byte 0 from word
lb3, lb, Pass, ha6017, load byte 1 from word
lb4, lb, Pass, ha6017, load byte 3 from word
lb5, lb, Pass, ha6017, sign extension
lb6, lb, Pass, ha6017, invalid memory access lower limit
lb7, lb, Pass, ha6017, invalid memory access upper limit
lb8, lb, Pass, ha6017, putc out of range
lb9, lb, Pass, ha6017, getc in range but not at 003
lbu1, lbu, Pass, ha6017, load unisgned byte 0 from word
lbu2, lbu, Pass, ha6017, load byte 1 from word
lbu3, lbu, Pass, ha6017, load byte 2 from word
lbu4, lbu, Pass, ha6017, load unsigned byte 3 from word
lbu5, lbu, Pass, ha6017, sign extension
lbu6, lbu, Pass, ha6017, invalid memory access lower limit
lbu7, lbu, Pass, ha6017, invalid memory access upper limit
lbu8, lbu, Pass, ha6017, putc out of range
lbu9, lbu, Pass, ha6017, getc in range but not at 003
mult1, mult, Pass, ca2217, LO register mult 2 positive
mult2, mult, Pass, ca2217, HI mult two positive
mult3, mult, Pass, ca2217, neg x neg
mult4, mult, Pass, ca2217, neg x pos
mult5, mult, Fail, ca2217, (-1) x most neg
mult6, mult, Fail, ca2217, most +ve x most -ve
mult7, mult, Pass, ca2217, numx0
multu1, multu, Pass, ca2217, LO register must 2 positive
multu2, multu, Fail, ca2217, HI multu two positive
or1, or, Pass, ca2217, or all 1s
or2, or, Pass, ca2217, or all 0s
or3, or, Pass, ca2217, changing register contents
ori1, ori, Pass, ca2217, or all 1s
ori2, ori, Pass, ca2217, or all 0s
ori3, ori, Pass, ca2217, changing register contents
ori4, ori, Pass, ca2217, checking correct range
slt1, slt, Pass, ca2217,  0 < +ve
slt2, slt, Pass, ca2217,  0 < -ve
slt3, slt, Pass, ca2217,  -ve < +ve
slt4, slt, Pass, ca2217,  -ve < 0
slt5, slt, Pass, ca2217,  +ve < 0
slt6, slt, Pass, ca2217,  0 < 0
slt7, slt, Pass, ca2217,  num < num
sltu1, sltu, Pass, ca2217,  0 < +ve
sltu2, slt, Pass, ca2217,  +ve < 0
sltu3, sltu, Pass, ca2217,  0 < 0
sltu4, sltu, Pass, ca2217,  num1 < num2
xor1, xor, Pass, ca2217, xor all 1s
xor2, xor, Pass, ca2217, xor all 0s
xor3, xor, Pass, ca2217, changing register contents
xori1, xori, Pass, ca2217, or all 1s
xori2, xori, Pass, ca2217, or all 0s
xori3, xori, Pass, ca2217, changing register contents
xori4, xori, Pass, ca2217, checking correct range
